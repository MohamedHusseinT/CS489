@page "/accounts"
@using CAMS.Shared.DTOs
@using CAMS.Blazor.Services
@inject ICustomerAccountService CustomerAccountService
@inject NavigationManager Navigation

<PageTitle>All Customer Accounts - The Special Bank of Burlington</PageTitle>

<div class="container-fluid">
    <!-- Header -->
    <div class="row bg-primary text-white py-3 mb-4">
        <div class="col">
            <div class="d-flex justify-content-between align-items-center">
                <h1 class="display-5 mb-0">Our Customer-Accounts</h1>
                <button class="btn btn-light" @onclick="() => Navigation.NavigateTo("/")">
                    <i class="fas fa-home"></i> Home
                </button>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading customer accounts...</p>
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            <h4 class="alert-heading">Error!</h4>
            <p>@errorMessage</p>
        </div>
    }
    else
    {
        <!-- Accounts Table -->
        <div class="row">
            <div class="col-12">
                <div class="card shadow">
                    <div class="card-header">
                        <h5 class="mb-0">Customer Accounts (Sorted by Balance - Descending)</h5>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-striped table-hover mb-0">
                                <thead class="table-dark">
                                    <tr>
                                        <th>#</th>
                                        <th>Account Number</th>
                                        <th>Customer</th>
                                        <th>Account Type</th>
                                        <th>Balance (in US$)</th>
                                        <th>Date Opened</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        int index = 1;
                                    }
                                    @foreach (var account in accounts)
                                    {
                                        <tr>
                                            <td>@index</td>
                                            <td><strong>@account.AccountNumber</strong></td>
                                            <td>@account.CustomerName</td>
                                            <td>
                                                <span class="badge @(account.AccountType == "Checking" ? "bg-info" : "bg-success")">
                                                    @account.AccountType
                                                </span>
                                            </td>
                                            <td>
                                                <strong class="@(account.Balance > 10000 ? "text-success" : "")">
                                                    @account.Balance.ToString("C")
                                                </strong>
                                                @if (account.Balance > 10000)
                                                {
                                                    <i class="fas fa-star text-warning ms-1" title="Prime Account"></i>
                                                }
                                            </td>
                                            <td>@(account.DateOpened?.ToString("yyyy-MM-dd") ?? "N/A")</td>
                                        </tr>
                                        index++;
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Liquidity Position -->
        @if (liquidityPosition != null)
        {
            <div class="row mt-4">
                <div class="col-12">
                    <div class="alert alert-success" role="alert">
                        <h4 class="alert-heading">
                            <i class="fas fa-chart-line"></i> Liquidity Position
                        </h4>
                        <hr>
                        <div class="row">
                            <div class="col-md-4">
                                <strong>Total Balance:</strong><br>
                                <span class="h4 text-success">@liquidityPosition.TotalBalance.ToString("C")</span>
                            </div>
                            <div class="col-md-4">
                                <strong>Total Accounts:</strong><br>
                                <span class="h4 text-primary">@liquidityPosition.TotalAccounts</span>
                            </div>
                            <div class="col-md-4">
                                <strong>Prime Accounts:</strong><br>
                                <span class="h4 text-warning">@liquidityPosition.PrimeAccounts</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    private List<CustomerAccountDto> accounts = new();
    private LiquidityPositionDto? liquidityPosition;
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            // Load accounts and liquidity position in parallel
            var accountsTask = CustomerAccountService.GetAllCustomerAccountsAsync();
            var liquidityTask = CustomerAccountService.GetLiquidityPositionAsync();

            await Task.WhenAll(accountsTask, liquidityTask);

            accounts = (await accountsTask).ToList();
            liquidityPosition = await liquidityTask;
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load customer accounts: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}
